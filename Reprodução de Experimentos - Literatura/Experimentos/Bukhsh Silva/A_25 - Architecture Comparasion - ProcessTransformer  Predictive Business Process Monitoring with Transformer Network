{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1tiOh2VS8yzOVON26CbmWn0oUn-dWAFhN","timestamp":1645209977362}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","metadata":{"id":"JyUSGVgneZOe"},"source":["## ProcessTransformer for Predictive Business Process Monitoring"]},{"cell_type":"markdown","metadata":{"id":"fuaYEyEqg_o4"},"source":["*   https://colab.research.google.com/drive/13QzHpSMtzj0GP1EXKW_kcaBvfbUHbjf7?usp=sharing\n","\n","*   Dataset: A25\n","*   Partição: Bukshs / Silva\n","*   Rede: LSTM / MultHeadAttention\n","\n"]},{"cell_type":"code","source":[],"metadata":{"id":"d5s96rbM5ODs","executionInfo":{"status":"ok","timestamp":1696900558019,"user_tz":180,"elapsed":19,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"id":"v02NSv7Lyp_R","executionInfo":{"status":"ok","timestamp":1696900558021,"user_tz":180,"elapsed":16,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","import os\n","import numpy as np\n","import random\n","\n","SEED = 0"],"metadata":{"id":"ypOagSpOcPiw","executionInfo":{"status":"ok","timestamp":1696900561621,"user_tz":180,"elapsed":3614,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def set_seeds(seed=SEED):\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    random.seed(seed)\n","    tf.random.set_seed(seed)\n","    np.random.seed(seed)"],"metadata":{"id":"yo_sv-YOgky0","executionInfo":{"status":"ok","timestamp":1696900561621,"user_tz":180,"elapsed":33,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def set_global_determinism(seed=SEED):\n","    set_seeds(seed=seed)\n","\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","    os.environ['TF_CUDNN_DETERMINISTIC'] = '1'\n","\n","    tf.config.threading.set_inter_op_parallelism_threads(1)\n","    tf.config.threading.set_intra_op_parallelism_threads(1)\n","\n","# Call the above function with seed value\n","set_global_determinism(seed=SEED)"],"metadata":{"id":"EhgvC5aOgoL3","executionInfo":{"status":"ok","timestamp":1696900561621,"user_tz":180,"elapsed":30,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from google.colab import files"],"metadata":{"id":"sr0Wr2-6joh7","executionInfo":{"status":"ok","timestamp":1696900561622,"user_tz":180,"elapsed":29,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"ddRWDNJBjl_m"}},{"cell_type":"code","source":["from numpy.random import seed\n","seed(1)\n","import tensorflow\n","tensorflow.random.set_seed(42)"],"metadata":{"id":"fQ3OxgyU5XPa","executionInfo":{"status":"ok","timestamp":1696900561622,"user_tz":180,"elapsed":27,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["#author = 'Silva'\n","author = 'Bukhsh'"],"metadata":{"id":"1QO5eoAmY9zu","executionInfo":{"status":"ok","timestamp":1696900561622,"user_tz":180,"elapsed":26,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["particionamento = 'Silva'\n","#particionamento = 'Bukhsh'"],"metadata":{"id":"WtJuakurmvwQ","executionInfo":{"status":"ok","timestamp":1696900561623,"user_tz":180,"elapsed":23,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["! pip install wget"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BZurYkjiylux","executionInfo":{"status":"ok","timestamp":1696900571634,"user_tz":180,"elapsed":10034,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"4004fa8e-11b2-40b1-974e-0d582c01ff0b"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wget\n","  Downloading wget-3.2.zip (10 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: wget\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9655 sha256=98be5ac10cc55e15d35f33612e119ca455c9f7b3613949472432e32097fcf965\n","  Stored in directory: /root/.cache/pip/wheels/8b/f1/7f/5c94f0a7a505ca1c81cd1d9208ae2064675d97582078e6c769\n","Successfully built wget\n","Installing collected packages: wget\n","Successfully installed wget-3.2\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"T5RrDLHqV0Ob"}},{"cell_type":"code","source":["! pip install keras-self-attention"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWjTA60GV0cP","executionInfo":{"status":"ok","timestamp":1696900577239,"user_tz":180,"elapsed":5612,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"1c886043-f0ca-4fd6-c996-e708d0971f55"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-self-attention\n","  Downloading keras-self-attention-0.51.0.tar.gz (11 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras-self-attention) (1.23.5)\n","Building wheels for collected packages: keras-self-attention\n","  Building wheel for keras-self-attention (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-self-attention: filename=keras_self_attention-0.51.0-py3-none-any.whl size=18895 sha256=8052cd99476dc7478866eb3bc8c272a771bbbe3c4472f29fd93ee536efaf739c\n","  Stored in directory: /root/.cache/pip/wheels/b8/f7/24/607b483144fb9c47b4ba2c5fba6b68e54aeee2d5bf6c05302e\n","Successfully built keras-self-attention\n","Installing collected packages: keras-self-attention\n","Successfully installed keras-self-attention-0.51.0\n"]}]},{"cell_type":"code","source":["! pip install keras-multi-head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s_pyhqJJBeQN","executionInfo":{"status":"ok","timestamp":1696900585245,"user_tz":180,"elapsed":8017,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"c80df7ef-a5e2-42f1-de45-7b1ada932903"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-multi-head\n","  Downloading keras-multi-head-0.29.0.tar.gz (13 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: keras-self-attention==0.51.0 in /usr/local/lib/python3.10/dist-packages (from keras-multi-head) (0.51.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras-self-attention==0.51.0->keras-multi-head) (1.23.5)\n","Building wheels for collected packages: keras-multi-head\n","  Building wheel for keras-multi-head (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-multi-head: filename=keras_multi_head-0.29.0-py3-none-any.whl size=14977 sha256=b9af98c08eb96f855647332c0d0ad15a5f27334b3e007aaf719bc6427bdc2926\n","  Stored in directory: /root/.cache/pip/wheels/cb/23/4b/06d7ae21714f70fcc25b48f972cc8e5e7f4b6b764a038b509d\n","Successfully built keras-multi-head\n","Installing collected packages: keras-multi-head\n","Successfully installed keras-multi-head-0.29.0\n"]}]},{"cell_type":"markdown","source":["### Positional Embedding - Chollet"],"metadata":{"id":"kaVOUgEDVJDO"}},{"cell_type":"markdown","source":["The idea behind positional encoding is very simple: to give the model access to wordorder information, we’re going to add the word’s position in the sentence to each word embedding. Our input word embeddings will have two components: the usual word vector, which represents the word independently of any specific context, and a position vector, which represents the position of the word in the current sentence."],"metadata":{"id":"JxBMXDSbufzL"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers"],"metadata":{"id":"pGBu-qsBVdiT","executionInfo":{"status":"ok","timestamp":1696900585245,"user_tz":180,"elapsed":32,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["class PositionalEmbedding(layers.Layer):\n","    def __init__(self, sequence_length, input_dim, output_dim, **kwargs):\n","        super().__init__(**kwargs)\n","\n","        #Prepare an Embedding layer for the token indices.\n","        self.token_embeddings = layers.Embedding(\n","            input_dim=input_dim, output_dim=output_dim)\n","\n","        #And another one for the token positions\n","        self.position_embeddings = layers.Embedding(\n","            input_dim=sequence_length, output_dim=output_dim)\n","        self.sequence_length = sequence_length\n","        self.input_dim = input_dim\n","        self.output_dim = output_dim\n","\n","    def call(self, inputs):\n","        length = tf.shape(inputs)[-1]\n","        positions = tf.range(start=0, limit=length, delta=1)\n","        embedded_tokens = self.token_embeddings(inputs)\n","        embedded_positions = self.position_embeddings(positions)\n","\n","        # Add both embedding vectors together.\n","        return embedded_tokens + embedded_positions\n","\n","    def compute_mask(self, inputs, mask=None):\n","        return tf.math.not_equal(inputs, 0)\n","\n","    # Implement serialization so we can save the model.\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update({\n","            \"output_dim\": self.output_dim,\n","            \"sequence_length\": self.sequence_length,\n","            \"input_dim\": self.input_dim,\n","        })\n","        return config"],"metadata":{"id":"uX9V5NdXVJPc","executionInfo":{"status":"ok","timestamp":1696900585246,"user_tz":180,"elapsed":30,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["import os\n","import wget\n","import argparse\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn import metrics"],"metadata":{"id":"dt2upLE3w0mZ","executionInfo":{"status":"ok","timestamp":1696900586249,"user_tz":180,"elapsed":1032,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["import enum\n","\n","@enum.unique\n","class Task(enum.Enum):\n","  \"\"\"Look up for tasks.\"\"\"\n","\n","  NEXT_ACTIVITY = \"next_activity\"\n","  NEXT_TIME = \"next_time\"\n","  REMAINING_TIME = \"remaining_time\""],"metadata":{"id":"asRrjVXe0lUH","executionInfo":{"status":"ok","timestamp":1696900586250,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["import io\n","import os\n","import json\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn import utils\n","from sklearn import preprocessing\n","\n","class LogsDataLoader:\n","    def __init__(self, name, dir_path = \"./datasets\"):\n","        \"\"\"Provides support for reading and\n","            pre-processing examples from processed logs.\n","        Args:\n","            name: str: name of the dataset as used during processing raw logs\n","            dir_path: str: Path to dataset directory\n","        \"\"\"\n","        self._dir_path = f\"{dir_path}/{name}/processed\"\n","\n","    def prepare_data_remaining_time(self, df, x_word_dict, max_case_length,\n","        #time_scaler = None, y_scaler = None, shuffle = False):\n","        time_scaler = None, y_scaler = None, shuffle = False):\n","\n","        x = df[\"prefix\"].values\n","        time_x = df[[\"recent_time\",\t\"latest_time\",\n","            \"time_passed\"]].values.astype(np.float32)\n","        y = df[\"remaining_time_days\"].values.astype(np.float32)\n","\n","        if shuffle:\n","            x, time_x, y = utils.shuffle(x, time_x, y)\n","\n","        token_x = list()\n","        for _x in x:\n","            token_x.append([x_word_dict[s] for s in _x.split()])\n","\n","        if time_scaler is None:\n","            time_scaler = preprocessing.StandardScaler()\n","            time_x = time_scaler.fit_transform(\n","                time_x).astype(np.float32)\n","        else:\n","            time_x = time_scaler.transform(\n","                time_x).astype(np.float32)\n","\n","        if y_scaler is None:\n","            y_scaler = preprocessing.StandardScaler()\n","            y = y_scaler.fit_transform(\n","                y.reshape(-1, 1)).astype(np.float32)\n","        else:\n","            y = y_scaler.transform(\n","                y.reshape(-1, 1)).astype(np.float32)\n","\n","        token_x = tf.keras.preprocessing.sequence.pad_sequences(\n","            token_x, maxlen=max_case_length)\n","\n","        token_x = np.array(token_x, dtype=np.float32)\n","        time_x = np.array(time_x, dtype=np.float32)\n","        y = np.array(y, dtype=np.float32)\n","\n","        return token_x, time_x, y, time_scaler, y_scaler\n","\n","    def get_max_case_length(self, train_x):\n","        train_token_x = list()\n","        for _x in train_x:\n","            train_token_x.append(len(_x.split()))\n","        return max(train_token_x)\n","\n","    def load_data(self, task):\n","        if task not in (Task.NEXT_ACTIVITY,\n","            Task.NEXT_TIME,\n","            Task.REMAINING_TIME):\n","            raise ValueError(\"Invalid task.\")\n","\n","        # TODO: aplicar filtro dos cases [train, val, test]\n","        train_df = pd.read_csv(f\"{self._dir_path}/{task.value}_train.csv\")\n","        test_df = pd.read_csv(f\"{self._dir_path}/{task.value}_test.csv\")\n","\n","        print('train_df: ', len(train_df))\n","        print('test_df: ', len(test_df))\n","\n","        #pegar os meus case_id e filtrar\n","\n","        with open(f\"{self._dir_path}/metadata.json\", \"r\") as json_file:\n","            metadata = json.load(json_file)\n","\n","        x_word_dict = metadata[\"x_word_dict\"]\n","        y_word_dict = metadata[\"y_word_dict\"]\n","        max_case_length = self.get_max_case_length(train_df[\"prefix\"].values)\n","        vocab_size = len(x_word_dict)\n","        total_classes = len(y_word_dict)\n","\n","        return (train_df, test_df,\n","            x_word_dict, y_word_dict,\n","            max_case_length, vocab_size,\n","            total_classes)"],"metadata":{"id":"CAjzJxrIwrgM","executionInfo":{"status":"ok","timestamp":1696900586828,"user_tz":180,"elapsed":586,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ruqWC9k61qN4","executionInfo":{"status":"ok","timestamp":1696900586829,"user_tz":180,"elapsed":33,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"4tlE5Na8CMix","executionInfo":{"status":"ok","timestamp":1696900586829,"user_tz":180,"elapsed":32,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["import os\n","import json\n","import pandas as pd\n","import numpy as np\n","import datetime\n","from multiprocessing import  Pool\n","\n","class LogsDataProcessor:\n","    def __init__(self, name, filepath, columns, dir_path = \"./datasets/processed\", pool = 1):\n","        \"\"\"Provides support for processing raw logs.\n","        Args:\n","            name: str: Dataset name\n","            filepath: str: Path to raw logs dataset\n","            columns: list: name of column names\n","            dir_path:  str: Path to directory for saving the processed dataset\n","            pool: Number of CPUs (processes) to be used for data processing\n","        \"\"\"\n","        self._name = name\n","        self._filepath = filepath\n","        self._org_columns = columns\n","        self._dir_path = dir_path\n","        if not os.path.exists(f\"{dir_path}/{self._name}/processed\"):\n","            os.makedirs(f\"{dir_path}/{self._name}/processed\")\n","        self._dir_path = f\"{self._dir_path}/{self._name}/processed\"\n","        self._pool = pool\n","\n","    def _load_df(self, sort_temporally = False):\n","        df = pd.read_csv(self._filepath)\n","        df = df[self._org_columns]\n","        df.columns = [\"case:concept:name\",\n","            \"concept:name\", \"time:timestamp\"]\n","        df[\"concept:name\"] = df[\"concept:name\"].str.lower()\n","        df[\"concept:name\"] = df[\"concept:name\"].str.replace(\" \", \"-\")\n","        df[\"time:timestamp\"] = df[\"time:timestamp\"].str.replace(\"/\", \"-\")\n","        df[\"time:timestamp\"]= pd.to_datetime(df[\"time:timestamp\"],\n","            dayfirst=True).map(lambda x: x.strftime(\"%Y-%m-%d %H:%M:%S\"))\n","        if sort_temporally:\n","            df.sort_values(by = [\"time:timestamp\"], inplace = True)\n","        return df\n","\n","    def _extract_logs_metadata(self, df):\n","        keys = [\"[PAD]\", \"[UNK]\"]\n","        activities = list(df[\"concept:name\"].unique())\n","        keys.extend(activities)\n","        val = range(len(keys))\n","\n","        coded_activity = dict({\"x_word_dict\":dict(zip(keys, val))})\n","        code_activity_normal = dict({\"y_word_dict\": dict(zip(activities, range(len(activities))))})\n","\n","        coded_activity.update(code_activity_normal)\n","        coded_json = json.dumps(coded_activity)\n","        with open(f\"{self._dir_path}/metadata.json\", \"w\") as metadata_file:\n","            metadata_file.write(coded_json)\n","\n","    def _remaining_time_helper_func(self, df):\n","        case_id = \"case:concept:name\"\n","        event_name = \"concept:name\"\n","        event_time = \"time:timestamp\"\n","        processed_df = pd.DataFrame(columns = [\"case_id\", \"prefix\", \"k\", \"time_passed\",\n","                \"recent_time\", \"latest_time\", \"next_act\", \"remaining_time_days\"])\n","        idx = 0\n","        unique_cases = df[case_id].unique()\n","        print('unique_cases', len(unique_cases))\n","        for _, case in enumerate(unique_cases):\n","            act = df[df[case_id] == case][event_name].to_list()\n","            time = df[df[case_id] == case][event_time].str[:19].to_list()\n","            time_passed = 0\n","            latest_diff = datetime.timedelta()\n","            recent_diff = datetime.timedelta()\n","            for i in range(0, len(act)):\n","                prefix = np.where(i == 0, act[0], \" \".join(act[:i+1]))\n","                if i > 0:\n","                    latest_diff = datetime.datetime.strptime(time[i], \"%Y-%m-%d %H:%M:%S\") - \\\n","                                        datetime.datetime.strptime(time[i-1], \"%Y-%m-%d %H:%M:%S\")\n","                if i > 1:\n","                    recent_diff = datetime.datetime.strptime(time[i], \"%Y-%m-%d %H:%M:%S\")- \\\n","                                    datetime.datetime.strptime(time[i-2], \"%Y-%m-%d %H:%M:%S\")\n","\n","                latest_time = np.where(i == 0, 0, latest_diff.days)\n","                recent_time = np.where(i <=1, 0, recent_diff.days)\n","                time_passed = time_passed + latest_time\n","\n","                time_stamp = str(np.where(i == 0, time[0], time[i]))\n","                ttc = datetime.datetime.strptime(time[-1], \"%Y-%m-%d %H:%M:%S\") - \\\n","                        datetime.datetime.strptime(time_stamp, \"%Y-%m-%d %H:%M:%S\")\n","                ttc = str(ttc.days)\n","                #print(ttc)\n","                processed_df.at[idx, \"case_id\"]  = case\n","                processed_df.at[idx, \"prefix\"]  =  prefix\n","                processed_df.at[idx, \"k\"] = i\n","                processed_df.at[idx, \"time_passed\"] = time_passed\n","                processed_df.at[idx, \"recent_time\"] = recent_time\n","                processed_df.at[idx, \"latest_time\"] =  latest_time\n","                processed_df.at[idx, \"remaining_time_days\"] = ttc\n","                idx = idx + 1\n","        processed_df_remaining_time = processed_df[[\"case_id\", \"prefix\", \"k\",\n","            \"time_passed\", \"recent_time\", \"latest_time\",\"remaining_time_days\"]]\n","\n","        return processed_df_remaining_time\n","\n","    def _process_remaining_time(self, df, train_list, test_list):\n","        df_split = np.array_split(df, self._pool)\n","        with Pool(processes=self._pool) as pool:\n","            processed_df = pd.concat(pool.imap_unordered(self._remaining_time_helper_func, df_split))\n","        train_remaining_time = processed_df[processed_df[\"case_id\"].isin(train_list)]\n","        test_remaining_time = processed_df[processed_df[\"case_id\"].isin(test_list)]\n","\n","        print('train_list: ',len(train_list))\n","        print('test_list: ',len(test_list))\n","\n","        print('train_remaining_time: ', len(train_remaining_time))\n","        print('test_remaining_time: ', len(test_remaining_time))\n","        print('tam intersection: ', len(set(train_list).intersection(set(test_list))))\n","\n","        #save\n","        train_remaining_time.to_csv(f\"{self._dir_path}/{Task.REMAINING_TIME.value}_train.csv\", index = False)\n","        test_remaining_time.to_csv(f\"{self._dir_path}/{Task.REMAINING_TIME.value}_test.csv\", index = False)\n","\n","        #train_remaining_time.to_csv('train_remaining_time.csv', index=False)\n","        #test_remaining_time.to_csv('test_remaining_time.csv', index=False)\n","\n","    def process_logs(self, task,\n","        sort_temporally = False,\n","        train_test_ratio = 0.80):\n","        df = self._load_df(sort_temporally)\n","        self._extract_logs_metadata(df)\n","        train_test_ratio = int(abs(df[\"case:concept:name\"].nunique()*train_test_ratio))\n","        train_list = df[\"case:concept:name\"].unique()[:train_test_ratio]\n","        test_list = df[\"case:concept:name\"].unique()[train_test_ratio:]\n","\n","        print('train_list: ', len(train_list))\n","        print('test_list: ', len(test_list))\n","\n","        if task == Task.NEXT_ACTIVITY:\n","            self._process_next_activity(df, train_list, test_list)\n","        elif task == Task.NEXT_TIME:\n","            self._process_next_time(df, train_list, test_list)\n","        elif task == Task.REMAINING_TIME:\n","            #ronildo\n","            ### partitionamento proprio\n","            if(particionamento == 'Silva'):\n","              print('particionamento proprio')\n","\n","              REPOSITORY_PREFIX = 'https://raw.githubusercontent.com/RonildoSilva/datasets/main/'\n","\n","              print('captura case ids')\n","              train_list = pd.read_csv(REPOSITORY_PREFIX+'SOL_A25_train_cases.csv')['CaseID'].unique()\n","              test_list = pd.read_csv(REPOSITORY_PREFIX+'SOL_A25_test_cases.csv')['CaseID'].unique()\n","\n","              print('train len part rn: ', len(train_list))\n","              print('test len part rn:  ', len(test_list))\n","              self._process_remaining_time(df, train_list, test_list)\n","            else:\n","              self._process_remaining_time(df, train_list, test_list)\n","        else:\n","            raise ValueError(\"Invalid task.\")"],"execution_count":17,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","from keras.layers import Lambda\n","from keras.layers import Dropout\n","\n","from keras.layers import Embedding\n","from tensorflow.keras.layers import concatenate\n","\n","# new aproach\n","from keras.models import Sequential, Model\n","from keras.layers import Dense\n","from keras.layers import LSTM, GRU, SimpleRNN\n","from keras.layers import Input\n","\n","from keras_self_attention import SeqSelfAttention, SeqWeightedAttention\n","from keras.utils import plot_model\n","from keras.layers import PReLU\n","from keras.layers import Bidirectional\n","\n","from keras.layers import Activation\n","from keras.initializers import Constant\n","\n","class TransformerBlock(layers.Layer):\n","    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n","        super(TransformerBlock, self).__init__()\n","        self.att = layers.MultiHeadAttention(num_heads=num_heads, key_dim=embed_dim)\n","        self.ffn = tf.keras.Sequential(\n","            [layers.Dense(ff_dim, activation=\"relu\"), layers.Dense(embed_dim),]\n","        )\n","        self.layernorm_a = layers.LayerNormalization(epsilon=1e-6)\n","        self.layernorm_b = layers.LayerNormalization(epsilon=1e-6)\n","        self.dropout_a = layers.Dropout(rate)\n","        self.dropout_b = layers.Dropout(rate)\n","\n","    def call(self, inputs, training):\n","        attn_output = self.att(inputs, inputs)\n","        attn_output = self.dropout_a(attn_output, training=training)\n","        out_a = self.layernorm_a(inputs + attn_output)\n","        ffn_output = self.ffn(out_a)\n","        ffn_output = self.dropout_b(ffn_output, training=training)\n","        return self.layernorm_b(out_a + ffn_output)\n","\n","class TokenAndPositionEmbedding(layers.Layer):\n","    def __init__(self, maxlen, vocab_size, embed_dim):\n","        super(TokenAndPositionEmbedding, self).__init__()\n","        self.token_emb = layers.Embedding(input_dim=vocab_size, output_dim=embed_dim)\n","        self.pos_emb = layers.Embedding(input_dim=maxlen, output_dim=embed_dim)\n","\n","    def call(self, x):\n","        maxlen = tf.shape(x)[-1]\n","        positions = tf.range(start=0, limit=maxlen, delta=1)\n","        positions = self.pos_emb(positions)\n","        x = self.token_emb(x)\n","        return x + positions\n","\n","# bukhsh\n","def get_remaining_time_model(max_case_length, vocab_size, output_dim = 1,\n","    embed_dim = 36, num_heads = 4, ff_dim = 64):\n","\n","    inputs = layers.Input(shape=(max_case_length,))\n","    # Three time-based features\n","    #activity\n","    time_inputs = layers.Input(shape=(3,))\n","    x = TokenAndPositionEmbedding(max_case_length, vocab_size, embed_dim)(inputs)#####\n","    x = TransformerBlock(embed_dim, num_heads, ff_dim)(x)\n","    x = layers.GlobalAveragePooling1D()(x)\n","\n","    #time\n","    x_t = layers.Dense(32, activation=\"relu\")(time_inputs)\n","    x = layers.Concatenate()([x, x_t])\n","    x = layers.Dropout(0.1)(x)\n","    x = layers.Dense(128, activation=\"relu\")(x)\n","    x = layers.Dropout(0.1)(x)\n","\n","    #output\n","    outputs = layers.Dense(output_dim, activation=\"linear\")(x)\n","    transformer = tf.keras.Model(inputs=[inputs, time_inputs], outputs=outputs,\n","        name = \"remaining_time_transformer\")\n","    return transformer\n","\n","# new aproach ronildo\n","def get_remaining_time_model_new(max_case_length, vocab_size, output_dim = 1,\n","                                 embed_dim = 36, num_heads = 4, ff_dim = 64):\n","    seq_length = 15#len(ACT_COLS)\n","    seq_length_t = 3#len(TIME_COLS)\n","\n","    input_dim = 18 # n_activities + 1\n","\n","    activity_input = Input(shape=(seq_length,), name='prefixo')\n","    time_input = Input(shape=(3,), name='dados_temporais')\n","\n","    embedding_size = 18\n","\n","    embedding = Embedding(output_dim=embedding_size,\n","                      input_dim=input_dim,\n","                      input_length=seq_length,\n","                      name='keras_embedding')(activity_input)\n","\n","    att = SeqSelfAttention(\n","    attention_width=embedding_size,\n","    attention_activation='relu',\n","    name='Attention')(embedding)\n","\n","    rnn = Bidirectional(LSTM(embedding_size,\n","                                dropout=0.1,\n","                                recurrent_dropout=0.1,\n","                                kernel_regularizer=keras.regularizers.l2(0.01), name='LSTM'),\n","                          name='BiLSTM')(att)\n","\n","\n","    x = concatenate([rnn, time_input], name='juncao')\n","\n","    x = Dense((seq_length + seq_length_t),\n","              activation='relu',\n","              name='prefixo_tempo')(x)\n","\n","    \"\"\"\n","    x = layers.Dropout(0.1)(x)#\n","\n","    x = Flatten()(x)\n","    x = layers.Dropout(0.1)(x)#\n","\n","    x = Dense(1, activation='linear', name='saida')(x)\n","    \"\"\"\n","    x = Flatten()(x)\n","    x = Dense(1, activation='linear', name='saida')(x)\n","\n","    model = Model(inputs=[activity_input , time_input], outputs=[x])\n","\n","    model = Model(inputs=[activity_input , time_input], outputs=[x])\n","    return model\n"],"metadata":{"id":"FMJWAd9K5b9z","executionInfo":{"status":"ok","timestamp":1696900586829,"user_tz":180,"elapsed":30,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XC8i1q2JUzNV","executionInfo":{"status":"ok","timestamp":1696900586829,"user_tz":180,"elapsed":29,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JldUs7KEFiab"},"source":["### Remaining Time Prediction"]},{"cell_type":"markdown","metadata":{"id":"Sh1ERDpTGHZx"},"source":["#### Data processing"]},{"cell_type":"code","source":["! ls -lh"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KdWDEw5QogEo","executionInfo":{"status":"ok","timestamp":1696900586830,"user_tz":180,"elapsed":29,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"84d26c2f-e3ab-4f58-de3e-c80743e2bdc4"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["total 4.0K\n","drwxr-xr-x 1 root root 4.0K Oct  6 13:25 sample_data\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"m7dBedKWpyhw","executionInfo":{"status":"ok","timestamp":1696900586830,"user_tz":180,"elapsed":15,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["! rm *.csv"],"metadata":{"id":"a2_V1imsoh9g","executionInfo":{"status":"ok","timestamp":1696900586830,"user_tz":180,"elapsed":14,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d4247feb-9987-4091-9487-c806bbe7b528"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["rm: cannot remove '*.csv': No such file or directory\n"]}]},{"cell_type":"code","metadata":{"id":"HHn_t4VCGHZx","executionInfo":{"status":"ok","timestamp":1696900587697,"user_tz":180,"elapsed":876,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["data_dir = \"./datasets/\"\n","if not os.path.exists(data_dir):\n","  os.mkdir(data_dir)\n","_ = wget.download(\"https://raw.githubusercontent.com/RonildoSilva/datasets/main/SOL_4_Bukhsh.csv\")"],"execution_count":21,"outputs":[]},{"cell_type":"code","source":["#DATALOADER = 'helpdesk'\n","#FILEPATH = 'finale.csv'\n","#COLUMNS = [\"Case ID\", \"Activity\", \"Complete Timestamp\"]\n","\n","DATALOADER = 'a25'\n","FILEPATH = 'SOL_4_Bukhsh.csv'\n","COLUMNS = [\"case:concept:name\", \"concept:name\", \"time:timestamp\"]"],"metadata":{"id":"Qgc1kiXxe7B4","executionInfo":{"status":"ok","timestamp":1696900587697,"user_tz":180,"elapsed":6,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ue4dKR3dGHZy","executionInfo":{"status":"ok","timestamp":1696900587697,"user_tz":180,"elapsed":5,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["data_processor = LogsDataProcessor(name=DATALOADER, filepath=FILEPATH,\n","                                    columns = COLUMNS,  #specify the columns name containing case_id, activity name and timestamp\n","                                    dir_path='datasets', pool = 4)"],"execution_count":23,"outputs":[]},{"cell_type":"code","source":["data_processor.process_logs(task=Task.REMAINING_TIME, sort_temporally = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AQ_5TxHk5yvZ","executionInfo":{"status":"ok","timestamp":1696900655614,"user_tz":180,"elapsed":67921,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"1c14a5a3-0edb-430a-c6ff-419629413bd3"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["train_list:  4912\n","test_list:  1228\n","particionamento proprio\n","captura case ids\n","train len part rn:  4912\n","test len part rn:   1228\n","unique_cases 1721unique_cases unique_cases1826\n"," \n","1863\n","unique_cases 1742\n","train_list:  4912\n","test_list:  1228\n","train_remaining_time:  30975\n","test_remaining_time:  7763\n","tam intersection:  0\n"]}]},{"cell_type":"code","metadata":{"id":"u7Z3PMbMGHZz","executionInfo":{"status":"ok","timestamp":1696900656161,"user_tz":180,"elapsed":571,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"080705c7-7b09-4022-dbef-d382f03b5bd7"},"source":["# Load data\n","data_loader = LogsDataLoader(name = DATALOADER)\n","\n","(train_df, test_df, x_word_dict, y_word_dict, max_case_length,\n","    vocab_size, num_output) = data_loader.load_data(Task.REMAINING_TIME)\n","\n","# Prepare training examples for next time prediction task\n","(train_token_x, train_time_x,\n","    train_token_y, time_scaler, y_scaler) = data_loader.prepare_data_remaining_time(train_df,\n","    x_word_dict, max_case_length)"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["train_df:  30975\n","test_df:  7763\n"]}]},{"cell_type":"markdown","metadata":{"id":"FShTazgeGHZ0"},"source":["#### Specfiy arguments"]},{"cell_type":"code","metadata":{"id":"pL_OIj_-GHZ0","executionInfo":{"status":"ok","timestamp":1696900656161,"user_tz":180,"elapsed":18,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["learning_rate = 0.001\n","batch_size = 120\n","epochs = 1"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6lqsEGC6GHZ1"},"source":["#### Training the model"]},{"cell_type":"code","source":["from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard\n","\n","es = EarlyStopping(monitor='loss', min_delta=1e-5, patience=10, verbose=0)"],"metadata":{"id":"clYW5FZiK0xW","executionInfo":{"status":"ok","timestamp":1696900656161,"user_tz":180,"elapsed":17,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["train_token_x.shape"],"metadata":{"id":"dcVZsnSgK1zE","executionInfo":{"status":"ok","timestamp":1696900656161,"user_tz":180,"elapsed":16,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2abf73b2-fbad-43ea-d347-421e06d7aa16"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(30975, 25)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["train_time_x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vPVfoVcFjeLA","executionInfo":{"status":"ok","timestamp":1696900656162,"user_tz":180,"elapsed":14,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"4cf156b8-5458-4b42-87af-69cf6aef8eb0"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(30975, 3)"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["print(author)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qIwab70pT8Yn","executionInfo":{"status":"ok","timestamp":1696900656162,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"980ca5b1-5b1a-4c89-fa14-3feeb013e740"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Bukhsh\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ukJu6XqmGHZ1","outputId":"cf1f5ea4-717d-44e2-cc01-4e303461c919","executionInfo":{"status":"ok","timestamp":1696900690769,"user_tz":180,"elapsed":34614,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["from keras_multi_head import MultiHead\n","from keras_multi_head import MultiHeadAttention\n","from keras.layers import Embedding\n","from keras.models import Model\n","from keras.layers import Flatten\n","from keras.layers import Masking\n","\n","# Create and train a transformer model\n","\n","if(author == 'Silva'):\n","  print(author)\n","  transformer_model = get_remaining_time_model_new(\n","      max_case_length=max_case_length,\n","      vocab_size=vocab_size)\n","\n","  nadam = keras.optimizers.Nadam(\n","    learning_rate=0.01, beta_1=0.9, beta_2=0.99, epsilon=1e-07, name=\"Nadam\")\n","\n","  \"\"\"\n","  transformer_model.compile(\n","      optimizer=nadam,\n","      loss=\"mean_absolute_error\",\n","      metrics=[\"mean_absolute_error\"]\n","  )\n","  \"\"\"\n","  transformer_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),\n","      loss=tf.keras.losses.LogCosh())\n","\n","  plot_model(transformer_model, show_shapes=True)\n","\n","  train_token_x_3d = train_token_x.reshape(train_token_x.shape[0], train_token_x.shape[1], 1)\n","  train_time_x_3d = train_time_x.reshape(train_time_x.shape[0], train_time_x.shape[1], 1)\n","  print(train_token_x_3d.shape)\n","  history = transformer_model.fit([train_token_x_3d, train_time_x_3d], train_token_y,\n","          epochs=epochs, batch_size=batch_size, verbose=2)\n","else:\n","  print(author)\n","  transformer_model = get_remaining_time_model(\n","      max_case_length=max_case_length,\n","      vocab_size=vocab_size)\n","\n","  plot_model(transformer_model, show_shapes=True)\n","\n","  transformer_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),\n","      loss=tf.keras.losses.LogCosh())\n","\n","  history = transformer_model.fit([train_token_x, train_time_x], train_token_y,\n","          epochs=epochs, batch_size=batch_size, verbose=2)"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Bukhsh\n","259/259 - 30s - loss: 0.2751 - 30s/epoch - 115ms/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"WNvwrbj-GHZ3"},"source":["#### Evaluate the model"]},{"cell_type":"code","source":["plot_model(transformer_model, show_shapes=True)"],"metadata":{"id":"PPTa1z6_W4Y6","executionInfo":{"status":"ok","timestamp":1696900690770,"user_tz":180,"elapsed":42,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/","height":976},"outputId":"35f5f2f6-1720-403a-d449-5243e9b3eef5"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["! ls 'datasets'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uFCU32YdUYAA","executionInfo":{"status":"ok","timestamp":1696900690770,"user_tz":180,"elapsed":14,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"f8164f7f-3f1d-4815-bf21-092e2173e2b0"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["a25\n"]}]},{"cell_type":"code","source":["\n","# from google.colab import files\n","# import pandas as pd\n","\n","# files.download('datasets/bpi12/processed/remaining_time_test.csv')\n","# files.download('datasets/bpi12/processed/remaining_time_train.csv')\n"],"metadata":{"id":"M6y3cf_JfFVG","executionInfo":{"status":"ok","timestamp":1696900690770,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WTt_-FrxfUA6","executionInfo":{"status":"ok","timestamp":1696900690770,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["test_df = pd.read_csv('datasets/a25/processed/remaining_time_test.csv')"],"metadata":{"id":"WfhWURl8XTYj","executionInfo":{"status":"ok","timestamp":1696900690770,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["len(test_df['case_id'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYOSIYIoZ07e","executionInfo":{"status":"ok","timestamp":1696900690771,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"4a028c8f-8fdc-4f30-cbad-545e46730c15"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1228"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["test_df['k'].max()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2348Dvp8cSN2","executionInfo":{"status":"ok","timestamp":1696900690771,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"226e65cc-d3c3-48de-b700-eb5437098622"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["test_df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"utELtM7LcHn0","executionInfo":{"status":"ok","timestamp":1696900690771,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"1cdbb8a3-8320-4065-a40b-ad8329f2b8e9"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['case_id', 'prefix', 'k', 'time_passed', 'recent_time', 'latest_time',\n","       'remaining_time_days'],\n","      dtype='object')"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"Xwz8E6glGHZ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696900693783,"user_tz":180,"elapsed":3019,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"c4b690c5-e641-4478-83f7-2e67a2b32e1a"},"source":["# Evaluate over all the prefixes (k) and save the results\n","k, maes, mses, rmses = [],[],[],[]\n","\n","for i in range(max_case_length):\n","    test_data_subset = test_df[test_df[\"k\"] == i]\n","    if len(test_data_subset) > 0:\n","        test_token_x, test_time_x, test_y, _, _ = data_loader.prepare_data_remaining_time(\n","            test_data_subset, x_word_dict, max_case_length, time_scaler, y_scaler, False) #shuffle\n","\n","        if(author == 'Silva'):\n","            test_token_x_3d = test_token_x.reshape(test_token_x.shape[0], test_token_x.shape[1], 1)\n","            test_time_x_3d = test_time_x.reshape(test_time_x.shape[0], test_time_x.shape[1], 1)\n","\n","            y_pred = transformer_model.predict([test_token_x_3d, test_time_x_3d])\n","        else:\n","            y_pred = transformer_model.predict([test_token_x, test_time_x])\n","\n","        _test_y = y_scaler.inverse_transform(test_y)\n","        _y_pred = y_scaler.inverse_transform(y_pred)\n","\n","        k.append(i)\n","        maes.append(metrics.mean_absolute_error(_test_y, _y_pred))\n","        mses.append(metrics.mean_squared_error(_test_y, _y_pred))\n","        rmses.append(np.sqrt(metrics.mean_squared_error(_test_y, _y_pred)))\n","    else:\n","      print('size', i, 'not found')\n","\n","k.append(i + 1)\n","maes.append(np.mean(maes))\n","mses.append(np.mean(mses))\n","rmses.append(np.mean(rmses))"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["39/39 [==============================] - 0s 3ms/step\n","39/39 [==============================] - 0s 3ms/step\n","39/39 [==============================] - 0s 3ms/step\n","38/38 [==============================] - 0s 4ms/step\n","31/31 [==============================] - 0s 4ms/step\n","27/27 [==============================] - 0s 3ms/step\n","14/14 [==============================] - 0s 3ms/step\n","10/10 [==============================] - 0s 3ms/step\n","5/5 [==============================] - 0s 4ms/step\n","3/3 [==============================] - 0s 5ms/step\n","2/2 [==============================] - 0s 7ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 27ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 29ms/step\n","size 19 not found\n","size 20 not found\n","size 21 not found\n","size 22 not found\n","size 23 not found\n","size 24 not found\n"]}]},{"cell_type":"code","source":["for i in range(len(maes)):\n","  print(str(round(maes[i], 4)).replace('.',','))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mMrBFpf-VBAt","executionInfo":{"status":"ok","timestamp":1696900693783,"user_tz":180,"elapsed":19,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"27750dd2-6c84-46b0-b3e7-41de8cc7f099"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["11,9367\n","11,5146\n","11,2859\n","9,0973\n","7,8864\n","6,2208\n","7,6218\n","5,4446\n","7,2296\n","5,4169\n","4,4804\n","6,7193\n","3,8838\n","3,2986\n","2,9209\n","2,0211\n","3,0064\n","4,4242\n","1,6196\n","6,1068\n"]}]},{"cell_type":"code","source":["for i in range(len(maes)):\n","  print(k[i], maes[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WSGMq6uFiFrh","executionInfo":{"status":"ok","timestamp":1696900693784,"user_tz":180,"elapsed":13,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"5583dfd6-9457-4390-a4dc-8df164dbd5da"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["0 11.936724\n","1 11.514612\n","2 11.285907\n","3 9.097266\n","4 7.8864202\n","5 6.220814\n","6 7.621769\n","7 5.4446163\n","8 7.2295775\n","9 5.416855\n","10 4.480449\n","11 6.7193136\n","12 3.8837535\n","13 3.2985542\n","14 2.9208536\n","15 2.0211482\n","16 3.006353\n","17 4.4241614\n","18 1.619585\n","25 6.1067758\n"]}]},{"cell_type":"code","metadata":{"id":"8sRN64RZGHZ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696900693784,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"d74b0129-e5e9-48c6-c48c-a3b490b6b278"},"source":["print('Average MAE across all prefixes:', np.mean(maes))\n","print('Average MSE across all prefixes:', np.mean(mses))\n","print('Average RMSE across all prefixes:', np.mean(rmses))"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Average MAE across all prefixes: 6.1067758\n","Average MSE across all prefixes: 151.85692\n","Average RMSE across all prefixes: 10.858917\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"mdS1UDPDjV4F","executionInfo":{"status":"ok","timestamp":1696900693784,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":["Teste sem prefixos"],"metadata":{"id":"0Lcrlh3Oh2jq"}},{"cell_type":"code","source":["test_token_x, test_time_x, test_y, _, _ = data_loader.prepare_data_remaining_time(\n","        test_df, x_word_dict, max_case_length, time_scaler, y_scaler, False) #shuffle\n","\n","y_pred = transformer_model.predict([test_token_x, test_time_x])\n","_test_y = y_scaler.inverse_transform(test_y)\n","_y_pred = y_scaler.inverse_transform(y_pred)\n","\n","metrics.mean_absolute_error(_test_y, _y_pred)"],"metadata":{"id":"i9MFm5qBTnJS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696900695262,"user_tz":180,"elapsed":1484,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"bb098915-95eb-4b76-e0c2-9cd59c1c7ae2"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["243/243 [==============================] - 1s 3ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["9.451009"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["import numpy as np\n","import scipy.stats\n","\n","def mean_confidence_interval(data, confidence=0.95):\n","    a = 1.0 * np.array(data)\n","    n = len(a)\n","    m, se = np.mean(a), scipy.stats.sem(a)\n","    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)\n","    return m, m-h, m+h\n","\n","int_conf = mean_confidence_interval(abs(np.squeeze(_test_y) - np.squeeze(_y_pred)))"],"metadata":{"id":"3Ir397XpMe-H","executionInfo":{"status":"ok","timestamp":1696900695263,"user_tz":180,"elapsed":20,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["int_conf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FLeVH3vKMf3l","executionInfo":{"status":"ok","timestamp":1696900695263,"user_tz":180,"elapsed":18,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"634e9f53-6820-4cae-b073-e586e59cb1cd"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9.451009, 9.14785440814223, 9.75416318524156)"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":[],"metadata":{"id":"SENhFqkd1wkT","executionInfo":{"status":"ok","timestamp":1696900695263,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":45,"outputs":[]}]}