{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1tiOh2VS8yzOVON26CbmWn0oUn-dWAFhN","timestamp":1645209977362}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","metadata":{"id":"JyUSGVgneZOe"},"source":["## ProcessTransformer for Predictive Business Process Monitoring"]},{"cell_type":"markdown","metadata":{"id":"fuaYEyEqg_o4"},"source":["*   https://colab.research.google.com/drive/13QzHpSMtzj0GP1EXKW_kcaBvfbUHbjf7?usp=sharing\n","\n","*   Dataset: BPI12\n","*   Partição: Bukshs / Silva\n","*   Rede: LSTM / MultHeadAttention\n","\n"]},{"cell_type":"code","source":[],"metadata":{"id":"d5s96rbM5ODs","executionInfo":{"status":"ok","timestamp":1690660125052,"user_tz":180,"elapsed":5,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"id":"v02NSv7Lyp_R","executionInfo":{"status":"ok","timestamp":1690660125053,"user_tz":180,"elapsed":5,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","import os\n","import numpy as np\n","import random\n","\n","SEED = 0"],"metadata":{"id":"ypOagSpOcPiw","executionInfo":{"status":"ok","timestamp":1690660129577,"user_tz":180,"elapsed":4529,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def set_seeds(seed=SEED):\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    random.seed(seed)\n","    tf.random.set_seed(seed)\n","    np.random.seed(seed)"],"metadata":{"id":"yo_sv-YOgky0","executionInfo":{"status":"ok","timestamp":1690660129578,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def set_global_determinism(seed=SEED):\n","    set_seeds(seed=seed)\n","\n","    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","    os.environ['TF_CUDNN_DETERMINISTIC'] = '1'\n","\n","    tf.config.threading.set_inter_op_parallelism_threads(1)\n","    tf.config.threading.set_intra_op_parallelism_threads(1)\n","\n","# Call the above function with seed value\n","set_global_determinism(seed=SEED)"],"metadata":{"id":"EhgvC5aOgoL3","executionInfo":{"status":"ok","timestamp":1690660129578,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from google.colab import files"],"metadata":{"id":"sr0Wr2-6joh7","executionInfo":{"status":"ok","timestamp":1690660129579,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"ddRWDNJBjl_m"}},{"cell_type":"code","source":["from numpy.random import seed\n","seed(1)\n","import tensorflow\n","tensorflow.random.set_seed(42)"],"metadata":{"id":"fQ3OxgyU5XPa","executionInfo":{"status":"ok","timestamp":1690660129579,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["#author = 'Silva'\n","author = 'Bukhsh'"],"metadata":{"id":"1QO5eoAmY9zu","executionInfo":{"status":"ok","timestamp":1690660129579,"user_tz":180,"elapsed":6,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["particionamento = 'Silva'\n","#particionamento = 'Bukhsh'"],"metadata":{"id":"WtJuakurmvwQ","executionInfo":{"status":"ok","timestamp":1690660129580,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["! pip install wget"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BZurYkjiylux","executionInfo":{"status":"ok","timestamp":1690660144543,"user_tz":180,"elapsed":14969,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"fa16d4f4-9ff7-4d59-87a5-afb213ef7a51"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wget\n","  Downloading wget-3.2.zip (10 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: wget\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9656 sha256=4687711aa29b8dfd57e9dc3abb744431b0febb6ecc51f05815085c49b709f918\n","  Stored in directory: /root/.cache/pip/wheels/8b/f1/7f/5c94f0a7a505ca1c81cd1d9208ae2064675d97582078e6c769\n","Successfully built wget\n","Installing collected packages: wget\n","Successfully installed wget-3.2\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"T5RrDLHqV0Ob"}},{"cell_type":"code","source":["! pip install keras-self-attention"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWjTA60GV0cP","executionInfo":{"status":"ok","timestamp":1690660150578,"user_tz":180,"elapsed":6039,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"16a44eb0-ba64-44f2-b6c2-569e25a0bedc"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-self-attention\n","  Downloading keras-self-attention-0.51.0.tar.gz (11 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras-self-attention) (1.22.4)\n","Building wheels for collected packages: keras-self-attention\n","  Building wheel for keras-self-attention (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-self-attention: filename=keras_self_attention-0.51.0-py3-none-any.whl size=18895 sha256=092869b3537b91499d4b7d6640d5cbe50e7aebc92cbaec3bccfa9f7cbe029742\n","  Stored in directory: /root/.cache/pip/wheels/b8/f7/24/607b483144fb9c47b4ba2c5fba6b68e54aeee2d5bf6c05302e\n","Successfully built keras-self-attention\n","Installing collected packages: keras-self-attention\n","Successfully installed keras-self-attention-0.51.0\n"]}]},{"cell_type":"code","source":["! pip install keras-multi-head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s_pyhqJJBeQN","executionInfo":{"status":"ok","timestamp":1690660156519,"user_tz":180,"elapsed":5943,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"375dd2ea-6587-473f-dee0-552bb89a7900"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras-multi-head\n","  Downloading keras-multi-head-0.29.0.tar.gz (13 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: keras-self-attention==0.51.0 in /usr/local/lib/python3.10/dist-packages (from keras-multi-head) (0.51.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras-self-attention==0.51.0->keras-multi-head) (1.22.4)\n","Building wheels for collected packages: keras-multi-head\n","  Building wheel for keras-multi-head (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-multi-head: filename=keras_multi_head-0.29.0-py3-none-any.whl size=14977 sha256=5d6b54a18a16d5ff369a9024dded1fc8a84342096a56f0363fea8420542c84d2\n","  Stored in directory: /root/.cache/pip/wheels/cb/23/4b/06d7ae21714f70fcc25b48f972cc8e5e7f4b6b764a038b509d\n","Successfully built keras-multi-head\n","Installing collected packages: keras-multi-head\n","Successfully installed keras-multi-head-0.29.0\n"]}]},{"cell_type":"markdown","source":["### Positional Embedding - Chollet"],"metadata":{"id":"kaVOUgEDVJDO"}},{"cell_type":"markdown","source":["The idea behind positional encoding is very simple: to give the model access to wordorder information, we’re going to add the word’s position in the sentence to each word embedding. Our input word embeddings will have two components: the usual word vector, which represents the word independently of any specific context, and a position vector, which represents the position of the word in the current sentence."],"metadata":{"id":"JxBMXDSbufzL"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers"],"metadata":{"id":"pGBu-qsBVdiT","executionInfo":{"status":"ok","timestamp":1690660156519,"user_tz":180,"elapsed":3,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["class PositionalEmbedding(layers.Layer):\n","    def __init__(self, sequence_length, input_dim, output_dim, **kwargs):\n","        super().__init__(**kwargs)\n","\n","        #Prepare an Embedding layer for the token indices.\n","        self.token_embeddings = layers.Embedding(\n","            input_dim=input_dim, output_dim=output_dim)\n","\n","        #And another one for the token positions\n","        self.position_embeddings = layers.Embedding(\n","            input_dim=sequence_length, output_dim=output_dim)\n","        self.sequence_length = sequence_length\n","        self.input_dim = input_dim\n","        self.output_dim = output_dim\n","\n","    def call(self, inputs):\n","        length = tf.shape(inputs)[-1]\n","        positions = tf.range(start=0, limit=length, delta=1)\n","        embedded_tokens = self.token_embeddings(inputs)\n","        embedded_positions = self.position_embeddings(positions)\n","\n","        # Add both embedding vectors together.\n","        return embedded_tokens + embedded_positions\n","\n","    def compute_mask(self, inputs, mask=None):\n","        return tf.math.not_equal(inputs, 0)\n","\n","    # Implement serialization so we can save the model.\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update({\n","            \"output_dim\": self.output_dim,\n","            \"sequence_length\": self.sequence_length,\n","            \"input_dim\": self.input_dim,\n","        })\n","        return config"],"metadata":{"id":"uX9V5NdXVJPc","executionInfo":{"status":"ok","timestamp":1690660156520,"user_tz":180,"elapsed":4,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["import os\n","import wget\n","import argparse\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn import metrics"],"metadata":{"id":"dt2upLE3w0mZ","executionInfo":{"status":"ok","timestamp":1690660157614,"user_tz":180,"elapsed":1097,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["import enum\n","\n","@enum.unique\n","class Task(enum.Enum):\n","  \"\"\"Look up for tasks.\"\"\"\n","\n","  NEXT_ACTIVITY = \"next_activity\"\n","  NEXT_TIME = \"next_time\"\n","  REMAINING_TIME = \"remaining_time\""],"metadata":{"id":"asRrjVXe0lUH","executionInfo":{"status":"ok","timestamp":1690660157615,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["import io\n","import os\n","import json\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn import utils\n","from sklearn import preprocessing\n","\n","class LogsDataLoader:\n","    def __init__(self, name, dir_path = \"./datasets\"):\n","        \"\"\"Provides support for reading and\n","            pre-processing examples from processed logs.\n","        Args:\n","            name: str: name of the dataset as used during processing raw logs\n","            dir_path: str: Path to dataset directory\n","        \"\"\"\n","        self._dir_path = f\"{dir_path}/{name}/processed\"\n","\n","    def prepare_data_remaining_time(self, df, x_word_dict, max_case_length,\n","        #time_scaler = None, y_scaler = None, shuffle = False):\n","        time_scaler = None, y_scaler = None, shuffle = False):\n","\n","        x = df[\"prefix\"].values\n","        time_x = df[[\"recent_time\",\t\"latest_time\",\n","            \"time_passed\"]].values.astype(np.float32)\n","        y = df[\"remaining_time_days\"].values.astype(np.float32)\n","\n","        if shuffle:\n","            x, time_x, y = utils.shuffle(x, time_x, y)\n","\n","        token_x = list()\n","        for _x in x:\n","            token_x.append([x_word_dict[s] for s in _x.split()])\n","\n","        if time_scaler is None:\n","            time_scaler = preprocessing.StandardScaler()\n","            time_x = time_scaler.fit_transform(\n","                time_x).astype(np.float32)\n","        else:\n","            time_x = time_scaler.transform(\n","                time_x).astype(np.float32)\n","\n","        if y_scaler is None:\n","            y_scaler = preprocessing.StandardScaler()\n","            y = y_scaler.fit_transform(\n","                y.reshape(-1, 1)).astype(np.float32)\n","        else:\n","            y = y_scaler.transform(\n","                y.reshape(-1, 1)).astype(np.float32)\n","\n","        token_x = tf.keras.preprocessing.sequence.pad_sequences(\n","            token_x, maxlen=max_case_length)\n","\n","        token_x = np.array(token_x, dtype=np.float32)\n","        time_x = np.array(time_x, dtype=np.float32)\n","        y = np.array(y, dtype=np.float32)\n","\n","        return token_x, time_x, y, time_scaler, y_scaler\n","\n","    def get_max_case_length(self, train_x):\n","        train_token_x = list()\n","        for _x in train_x:\n","            train_token_x.append(len(_x.split()))\n","        return max(train_token_x)\n","\n","    def load_data(self, task):\n","        if task not in (Task.NEXT_ACTIVITY,\n","            Task.NEXT_TIME,\n","            Task.REMAINING_TIME):\n","            raise ValueError(\"Invalid task.\")\n","\n","        # TODO: aplicar filtro dos cases [train, val, test]\n","        train_df = pd.read_csv(f\"{self._dir_path}/{task.value}_train.csv\")\n","        test_df = pd.read_csv(f\"{self._dir_path}/{task.value}_test.csv\")\n","\n","        #pegar os meus case_id e filtrar\n","\n","        with open(f\"{self._dir_path}/metadata.json\", \"r\") as json_file:\n","            metadata = json.load(json_file)\n","\n","        x_word_dict = metadata[\"x_word_dict\"]\n","        y_word_dict = metadata[\"y_word_dict\"]\n","        max_case_length = self.get_max_case_length(train_df[\"prefix\"].values)\n","        vocab_size = len(x_word_dict)\n","        total_classes = len(y_word_dict)\n","\n","        return (train_df, test_df,\n","            x_word_dict, y_word_dict,\n","            max_case_length, vocab_size,\n","            total_classes)"],"metadata":{"id":"CAjzJxrIwrgM","executionInfo":{"status":"ok","timestamp":1690660157616,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ruqWC9k61qN4","executionInfo":{"status":"ok","timestamp":1690660157616,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"4tlE5Na8CMix","executionInfo":{"status":"ok","timestamp":1690660157616,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["import os\n","import json\n","import pandas as pd\n","import numpy as np\n","import datetime\n","from multiprocessing import  Pool\n","\n","class LogsDataProcessor:\n","    def __init__(self, name, filepath, columns, dir_path = \"./datasets/processed\", pool = 1):\n","        \"\"\"Provides support for processing raw logs.\n","        Args:\n","            name: str: Dataset name\n","            filepath: str: Path to raw logs dataset\n","            columns: list: name of column names\n","            dir_path:  str: Path to directory for saving the processed dataset\n","            pool: Number of CPUs (processes) to be used for data processing\n","        \"\"\"\n","        self._name = name\n","        self._filepath = filepath\n","        self._org_columns = columns\n","        self._dir_path = dir_path\n","        if not os.path.exists(f\"{dir_path}/{self._name}/processed\"):\n","            os.makedirs(f\"{dir_path}/{self._name}/processed\")\n","        self._dir_path = f\"{self._dir_path}/{self._name}/processed\"\n","        self._pool = pool\n","\n","    def _load_df(self, sort_temporally = False):\n","        df = pd.read_csv(self._filepath)\n","        df = df[self._org_columns]\n","        df.columns = [\"case:concept:name\",\n","            \"concept:name\", \"time:timestamp\"]\n","        df[\"concept:name\"] = df[\"concept:name\"].str.lower()\n","        df[\"concept:name\"] = df[\"concept:name\"].str.replace(\" \", \"-\")\n","        df[\"time:timestamp\"] = df[\"time:timestamp\"].str.replace(\"/\", \"-\")\n","        df[\"time:timestamp\"]= pd.to_datetime(df[\"time:timestamp\"],\n","            dayfirst=True).map(lambda x: x.strftime(\"%Y-%m-%d %H:%M:%S\"))\n","        if sort_temporally:\n","            df.sort_values(by = [\"time:timestamp\"], inplace = True)\n","        return df\n","\n","    def _extract_logs_metadata(self, df):\n","        keys = [\"[PAD]\", \"[UNK]\"]\n","        activities = list(df[\"concept:name\"].unique())\n","        keys.extend(activities)\n","        val = range(len(keys))\n","\n","        coded_activity = dict({\"x_word_dict\":dict(zip(keys, val))})\n","        code_activity_normal = dict({\"y_word_dict\": dict(zip(activities, range(len(activities))))})\n","\n","        coded_activity.update(code_activity_normal)\n","        coded_json = json.dumps(coded_activity)\n","        with open(f\"{self._dir_path}/metadata.json\", \"w\") as metadata_file:\n","            metadata_file.write(coded_json)\n","\n","    def _remaining_time_helper_func(self, df):\n","        case_id = \"case:concept:name\"\n","        event_name = \"concept:name\"\n","        event_time = \"time:timestamp\"\n","        processed_df = pd.DataFrame(columns = [\"case_id\", \"prefix\", \"k\", \"time_passed\",\n","                \"recent_time\", \"latest_time\", \"next_act\", \"remaining_time_days\"])\n","        idx = 0\n","        unique_cases = df[case_id].unique()\n","        for _, case in enumerate(unique_cases):\n","            act = df[df[case_id] == case][event_name].to_list()\n","            time = df[df[case_id] == case][event_time].str[:19].to_list()\n","            time_passed = 0\n","            latest_diff = datetime.timedelta()\n","            recent_diff = datetime.timedelta()\n","            for i in range(0, len(act)):\n","                prefix = np.where(i == 0, act[0], \" \".join(act[:i+1]))\n","                if i > 0:\n","                    latest_diff = datetime.datetime.strptime(time[i], \"%Y-%m-%d %H:%M:%S\") - \\\n","                                        datetime.datetime.strptime(time[i-1], \"%Y-%m-%d %H:%M:%S\")\n","                if i > 1:\n","                    recent_diff = datetime.datetime.strptime(time[i], \"%Y-%m-%d %H:%M:%S\")- \\\n","                                    datetime.datetime.strptime(time[i-2], \"%Y-%m-%d %H:%M:%S\")\n","\n","                latest_time = np.where(i == 0, 0, latest_diff.days)\n","                recent_time = np.where(i <=1, 0, recent_diff.days)\n","                time_passed = time_passed + latest_time\n","\n","                time_stamp = str(np.where(i == 0, time[0], time[i]))\n","                ttc = datetime.datetime.strptime(time[-1], \"%Y-%m-%d %H:%M:%S\") - \\\n","                        datetime.datetime.strptime(time_stamp, \"%Y-%m-%d %H:%M:%S\")\n","                ttc = str(ttc.days)\n","                #print(ttc)\n","                processed_df.at[idx, \"case_id\"]  = case\n","                processed_df.at[idx, \"prefix\"]  =  prefix\n","                processed_df.at[idx, \"k\"] = i\n","                processed_df.at[idx, \"time_passed\"] = time_passed\n","                processed_df.at[idx, \"recent_time\"] = recent_time\n","                processed_df.at[idx, \"latest_time\"] =  latest_time\n","                processed_df.at[idx, \"remaining_time_days\"] = ttc\n","                idx = idx + 1\n","        processed_df_remaining_time = processed_df[[\"case_id\", \"prefix\", \"k\",\n","            \"time_passed\", \"recent_time\", \"latest_time\",\"remaining_time_days\"]]\n","\n","        return processed_df_remaining_time\n","\n","    def _process_remaining_time(self, df, train_list, test_list):\n","        df_split = np.array_split(df, self._pool)\n","        with Pool(processes=self._pool) as pool:\n","            processed_df = pd.concat(pool.imap_unordered(self._remaining_time_helper_func, df_split))\n","        train_remaining_time = processed_df[processed_df[\"case_id\"].isin(train_list)]\n","        test_remaining_time = processed_df[processed_df[\"case_id\"].isin(test_list)]\n","\n","        print('tam inter: ', len(set(train_list).intersection(set(test_list))))\n","\n","        #save\n","        train_remaining_time.to_csv(f\"{self._dir_path}/{Task.REMAINING_TIME.value}_train.csv\", index = False)\n","        test_remaining_time.to_csv(f\"{self._dir_path}/{Task.REMAINING_TIME.value}_test.csv\", index = False)\n","\n","        train_remaining_time.to_csv('train_remaining_time.csv', index=False)\n","        test_remaining_time.to_csv('test_remaining_time.csv', index=False)\n","\n","    def process_logs(self, task,\n","        sort_temporally = False,\n","        train_test_ratio = 0.80):\n","        df = self._load_df(sort_temporally)\n","        self._extract_logs_metadata(df)\n","        train_test_ratio = int(abs(df[\"case:concept:name\"].nunique()*train_test_ratio))\n","        train_list = df[\"case:concept:name\"].unique()[:train_test_ratio]\n","        test_list = df[\"case:concept:name\"].unique()[train_test_ratio:]\n","\n","        if task == Task.NEXT_ACTIVITY:\n","            self._process_next_activity(df, train_list, test_list)\n","        elif task == Task.NEXT_TIME:\n","            self._process_next_time(df, train_list, test_list)\n","        elif task == Task.REMAINING_TIME:\n","            #ronildo\n","            ### partitionamento proprio\n","            if(particionamento == 'Silva'):\n","              print('particionamento proprio')\n","\n","              REPOSITORY_PREFIX = 'https://raw.githubusercontent.com/RonildoSilva/datasets/main/'\n","\n","              print('captura case ids')\n","              train_list = pd.read_csv(REPOSITORY_PREFIX+'bpi12_case_ids_train_4_buk.csv')['CaseID'].unique()\n","              test_list = pd.read_csv(REPOSITORY_PREFIX+'bpi12_case_ids_test_4_buk.csv')['CaseID'].unique()\n","\n","              print('train len: ', len(train_list))\n","              print('test len:  ', len(test_list))\n","              self._process_remaining_time(df, train_list, test_list)\n","            else:\n","              self._process_remaining_time(df, train_list, test_list)\n","        else:\n","            raise ValueError(\"Invalid task.\")"],"execution_count":17,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","from keras.layers.core import Lambda\n","from keras.layers import Dropout\n","\n","from keras.layers import Embedding\n","from tensorflow.keras.layers import concatenate\n","\n","# new aproach\n","from keras.models import Sequential, Model\n","from keras.layers.core import Dense\n","from keras.layers import LSTM, GRU, SimpleRNN\n","from keras.layers import Input\n","\n","from keras_self_attention import SeqSelfAttention, SeqWeightedAttention\n","from keras.utils.vis_utils import plot_model\n","from keras.layers import PReLU\n","from keras.layers import Bidirectional\n","\n","from keras.layers.core import Activation\n","from keras.initializers import Constant\n","\n","class TransformerBlock(layers.Layer):\n","    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n","        super(TransformerBlock, self).__init__()\n","        self.att = layers.MultiHeadAttention(num_heads=num_heads, key_dim=embed_dim)\n","        self.ffn = tf.keras.Sequential(\n","            [layers.Dense(ff_dim, activation=\"relu\"), layers.Dense(embed_dim),]\n","        )\n","        self.layernorm_a = layers.LayerNormalization(epsilon=1e-6)\n","        self.layernorm_b = layers.LayerNormalization(epsilon=1e-6)\n","        self.dropout_a = layers.Dropout(rate)\n","        self.dropout_b = layers.Dropout(rate)\n","\n","    def call(self, inputs, training):\n","        attn_output = self.att(inputs, inputs)\n","        attn_output = self.dropout_a(attn_output, training=training)\n","        out_a = self.layernorm_a(inputs + attn_output)\n","        ffn_output = self.ffn(out_a)\n","        ffn_output = self.dropout_b(ffn_output, training=training)\n","        return self.layernorm_b(out_a + ffn_output)\n","\n","class TokenAndPositionEmbedding(layers.Layer):\n","    def __init__(self, maxlen, vocab_size, embed_dim):\n","        super(TokenAndPositionEmbedding, self).__init__()\n","        self.token_emb = layers.Embedding(input_dim=vocab_size, output_dim=embed_dim)\n","        self.pos_emb = layers.Embedding(input_dim=maxlen, output_dim=embed_dim)\n","\n","    def call(self, x):\n","        maxlen = tf.shape(x)[-1]\n","        positions = tf.range(start=0, limit=maxlen, delta=1)\n","        positions = self.pos_emb(positions)\n","        x = self.token_emb(x)\n","        return x + positions\n","\n","# bukhsh\n","def get_remaining_time_model(max_case_length, vocab_size, output_dim = 1,\n","    embed_dim = 36, num_heads = 4, ff_dim = 64):\n","\n","    inputs = layers.Input(shape=(max_case_length,))\n","    # Three time-based features\n","    #activity\n","    time_inputs = layers.Input(shape=(3,))\n","    x = TokenAndPositionEmbedding(max_case_length, vocab_size, embed_dim)(inputs)#####\n","    x = TransformerBlock(embed_dim, num_heads, ff_dim)(x)\n","    x = layers.GlobalAveragePooling1D()(x)\n","\n","    #time\n","    x_t = layers.Dense(32, activation=\"relu\")(time_inputs)\n","    x = layers.Concatenate()([x, x_t])\n","    x = layers.Dropout(0.1)(x)\n","    x = layers.Dense(128, activation=\"relu\")(x)\n","    x = layers.Dropout(0.1)(x)\n","\n","    #output\n","    outputs = layers.Dense(output_dim, activation=\"linear\")(x)\n","    transformer = tf.keras.Model(inputs=[inputs, time_inputs], outputs=outputs,\n","        name = \"remaining_time_transformer\")\n","    return transformer\n","\n","# new aproach ronildo\n","def get_remaining_time_model_new(max_case_length, vocab_size, output_dim = 1,\n","                                 embed_dim = 36, num_heads = 4, ff_dim = 64):\n","    seq_length = 15#len(ACT_COLS)\n","    seq_length_t = 3#len(TIME_COLS)\n","\n","    input_dim = 18 # n_activities + 1\n","\n","    activity_input = Input(shape=(seq_length,), name='prefixo')\n","    time_input = Input(shape=(3,), name='dados_temporais')\n","\n","    embedding_size = 18\n","\n","    embedding = Embedding(output_dim=embedding_size,\n","                      input_dim=input_dim,\n","                      input_length=seq_length,\n","                      name='keras_embedding')(activity_input)\n","\n","    att = SeqSelfAttention(\n","    attention_width=embedding_size,\n","    attention_activation='relu',\n","    name='Attention')(embedding)\n","\n","    rnn = Bidirectional(LSTM(embedding_size,\n","                                dropout=0.1,\n","                                recurrent_dropout=0.1,\n","                                kernel_regularizer=keras.regularizers.l2(0.01), name='LSTM'),\n","                          name='BiLSTM')(att)\n","\n","\n","    x = concatenate([rnn, time_input], name='juncao')\n","\n","    x = Dense((seq_length + seq_length_t),\n","              activation='relu',\n","              name='prefixo_tempo')(x)\n","\n","    \"\"\"\n","    x = layers.Dropout(0.1)(x)#\n","\n","    x = Flatten()(x)\n","    x = layers.Dropout(0.1)(x)#\n","\n","    x = Dense(1, activation='linear', name='saida')(x)\n","    \"\"\"\n","    x = Flatten()(x)\n","    x = Dense(1, activation='linear', name='saida')(x)\n","\n","    model = Model(inputs=[activity_input , time_input], outputs=[x])\n","\n","    model = Model(inputs=[activity_input , time_input], outputs=[x])\n","    return model\n",""],"metadata":{"id":"FMJWAd9K5b9z","executionInfo":{"status":"ok","timestamp":1690660157617,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XC8i1q2JUzNV","executionInfo":{"status":"ok","timestamp":1690660157617,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JldUs7KEFiab"},"source":["### Remaining Time Prediction"]},{"cell_type":"markdown","metadata":{"id":"Sh1ERDpTGHZx"},"source":["#### Data processing"]},{"cell_type":"code","metadata":{"id":"HHn_t4VCGHZx","executionInfo":{"status":"ok","timestamp":1690660159473,"user_tz":180,"elapsed":1864,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["data_dir = \"./datasets/\"\n","if not os.path.exists(data_dir):\n","  os.mkdir(data_dir)\n","#_ = wget.download(\"https://data.4tu.nl/ndownloader/files/23993303\")\n","_ = wget.download(\"https://github.com/RonildoSilva/datasets/blob/main/BPI_Challenge_2012_4_Bukhsh_Experiment.zip?raw=true\")"],"execution_count":19,"outputs":[]},{"cell_type":"code","source":["! unzip 'BPI_Challenge_2012_4_Bukhsh_Experiment.zip'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wt0kPkWyL-30","executionInfo":{"status":"ok","timestamp":1690660159474,"user_tz":180,"elapsed":14,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"b2954d8d-8371-4b8a-e08d-5bae153d5ef0"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  BPI_Challenge_2012_4_Bukhsh_Experiment.zip\n","  inflating: BPI_Challenge_2012_4_Bukhsh_Experiment.csv  \n"]}]},{"cell_type":"code","source":["! ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3qiBGgG541nD","executionInfo":{"status":"ok","timestamp":1690660159475,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"2a00fcff-0b74-4b85-baa0-60ad7e08311a"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["BPI_Challenge_2012_4_Bukhsh_Experiment.csv  datasets\n","BPI_Challenge_2012_4_Bukhsh_Experiment.zip  sample_data\n"]}]},{"cell_type":"code","source":["#DATALOADER = 'helpdesk'\n","#FILEPATH = 'finale.csv'\n","#COLUMNS = [\"Case ID\", \"Activity\", \"Complete Timestamp\"]\n","\n","DATALOADER = 'bpi12'\n","FILEPATH = 'BPI_Challenge_2012_4_Bukhsh_Experiment.csv'\n","COLUMNS = [\"case:concept:name\", \"concept:name\", \"time:timestamp\"]"],"metadata":{"id":"Qgc1kiXxe7B4","executionInfo":{"status":"ok","timestamp":1690660159475,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ue4dKR3dGHZy","executionInfo":{"status":"ok","timestamp":1690660159475,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["data_processor = LogsDataProcessor(name=DATALOADER, filepath=FILEPATH,\n","                                    columns = COLUMNS,  #specify the columns name containing case_id, activity name and timestamp\n","                                    dir_path='datasets', pool = 4)"],"execution_count":23,"outputs":[]},{"cell_type":"code","source":["data_processor.process_logs(task=Task.REMAINING_TIME, sort_temporally = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AQ_5TxHk5yvZ","executionInfo":{"status":"ok","timestamp":1690661623809,"user_tz":180,"elapsed":1464341,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"889fbb51-7976-48e5-cbf5-d90457f7f51d"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["particionamento proprio\n","captura case ids\n","train len:  7852\n","test len:   5235\n","tam inter:  0\n"]}]},{"cell_type":"code","metadata":{"id":"u7Z3PMbMGHZz","executionInfo":{"status":"ok","timestamp":1690661626457,"user_tz":180,"elapsed":2660,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["# Load data\n","data_loader = LogsDataLoader(name = DATALOADER)\n","\n","(train_df, test_df, x_word_dict, y_word_dict, max_case_length,\n","    vocab_size, num_output) = data_loader.load_data(Task.REMAINING_TIME)\n","\n","# Prepare training examples for next time prediction task\n","(train_token_x, train_time_x,\n","    train_token_y, time_scaler, y_scaler) = data_loader.prepare_data_remaining_time(train_df,\n","    x_word_dict, max_case_length)"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FShTazgeGHZ0"},"source":["#### Specfiy arguments"]},{"cell_type":"code","metadata":{"id":"pL_OIj_-GHZ0","executionInfo":{"status":"ok","timestamp":1690661626458,"user_tz":180,"elapsed":15,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["learning_rate = 0.001\n","batch_size = 120\n","epochs = 1"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6lqsEGC6GHZ1"},"source":["#### Training the model"]},{"cell_type":"code","source":["from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard\n","\n","es = EarlyStopping(monitor='loss', min_delta=1e-5, patience=10, verbose=0)"],"metadata":{"id":"clYW5FZiK0xW","executionInfo":{"status":"ok","timestamp":1690661626458,"user_tz":180,"elapsed":14,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["train_token_x.shape"],"metadata":{"id":"dcVZsnSgK1zE","executionInfo":{"status":"ok","timestamp":1690661626458,"user_tz":180,"elapsed":13,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"78a6f241-82b8-45a0-9bef-dd23c3162ba6"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(158706, 118)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["train_time_x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vPVfoVcFjeLA","executionInfo":{"status":"ok","timestamp":1690661626459,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"e1105db3-54d1-4e59-b83f-6fb4aa09d3b7"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(158706, 3)"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["print(author)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qIwab70pT8Yn","executionInfo":{"status":"ok","timestamp":1690661626459,"user_tz":180,"elapsed":7,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"b3ec7ac4-79ae-4269-b6ba-1e5f05ccce0a"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Bukhsh\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ukJu6XqmGHZ1","outputId":"c71a73b0-f9db-4c8c-cbff-17e8fabbff75","executionInfo":{"status":"ok","timestamp":1690661666274,"user_tz":180,"elapsed":39819,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"source":["from keras_multi_head import MultiHead\n","from keras_multi_head import MultiHeadAttention\n","from keras.layers import Embedding\n","from keras.models import Model\n","from keras.layers import Flatten\n","from keras.layers import Masking\n","\n","# Create and train a transformer model\n","\n","if(author == 'Silva'):\n","  print(author)\n","  transformer_model = get_remaining_time_model_new(\n","      max_case_length=max_case_length,\n","      vocab_size=vocab_size)\n","\n","  nadam = keras.optimizers.Nadam(\n","    learning_rate=0.01, beta_1=0.9, beta_2=0.99, epsilon=1e-07, name=\"Nadam\")\n","\n","  \"\"\"\n","  transformer_model.compile(\n","      optimizer=nadam,\n","      loss=\"mean_absolute_error\",\n","      metrics=[\"mean_absolute_error\"]\n","  )\n","  \"\"\"\n","  transformer_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),\n","      loss=tf.keras.losses.LogCosh())\n","\n","  plot_model(transformer_model, show_shapes=True)\n","\n","  train_token_x_3d = train_token_x.reshape(train_token_x.shape[0], train_token_x.shape[1], 1)\n","  train_time_x_3d = train_time_x.reshape(train_time_x.shape[0], train_time_x.shape[1], 1)\n","  print(train_token_x_3d.shape)\n","  history = transformer_model.fit([train_token_x_3d, train_time_x_3d], train_token_y,\n","          epochs=epochs, batch_size=batch_size, verbose=2)\n","else:\n","  print(author)\n","  transformer_model = get_remaining_time_model(\n","      max_case_length=max_case_length,\n","      vocab_size=vocab_size)\n","\n","  plot_model(transformer_model, show_shapes=True)\n","\n","  transformer_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),\n","      loss=tf.keras.losses.LogCosh())\n","\n","  history = transformer_model.fit([train_token_x, train_time_x], train_token_y,\n","          epochs=epochs, batch_size=batch_size, verbose=2)"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Bukhsh\n","1323/1323 - 35s - loss: 0.2951 - 35s/epoch - 26ms/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"WNvwrbj-GHZ3"},"source":["#### Evaluate the model"]},{"cell_type":"code","source":["plot_model(transformer_model, show_shapes=True)"],"metadata":{"id":"PPTa1z6_W4Y6","executionInfo":{"status":"ok","timestamp":1690661666274,"user_tz":180,"elapsed":26,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"colab":{"base_uri":"https://localhost:8080/","height":976},"outputId":"58ef4ea6-409e-46a9-b4cb-150b8f7f867e"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["! ls 'datasets/bpi12/processed'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uFCU32YdUYAA","executionInfo":{"status":"ok","timestamp":1690661666275,"user_tz":180,"elapsed":13,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"e86235f8-83b1-4cb2-923d-fcd54fc47bc3"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["metadata.json  remaining_time_test.csv\tremaining_time_train.csv\n"]}]},{"cell_type":"code","source":["\n","from google.colab import files\n","import pandas as pd\n","\n","files.download('datasets/bpi12/processed/remaining_time_test.csv')\n","files.download('datasets/bpi12/processed/remaining_time_train.csv')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"M6y3cf_JfFVG","executionInfo":{"status":"ok","timestamp":1690661666275,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"be8fe3a9-fcf5-4653-bd18-2a42776fb0c8"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_afafdae8-5b1c-4071-9d84-593bf520bb3c\", \"remaining_time_test.csv\", 35228520)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_cbf72964-8e47-46ef-8702-3cef1b203ec7\", \"remaining_time_train.csv\", 54514230)"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"WTt_-FrxfUA6","executionInfo":{"status":"ok","timestamp":1690661666276,"user_tz":180,"elapsed":9,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["test_df = pd.read_csv('datasets/bpi12/processed/remaining_time_test.csv')"],"metadata":{"id":"WfhWURl8XTYj","executionInfo":{"status":"ok","timestamp":1690661666807,"user_tz":180,"elapsed":540,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["len(test_df['case_id'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYOSIYIoZ07e","executionInfo":{"status":"ok","timestamp":1690661666808,"user_tz":180,"elapsed":16,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"2daf6444-e36c-4487-f67b-cacc067fd4ab"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5235"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["test_df['k'].max()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2348Dvp8cSN2","executionInfo":{"status":"ok","timestamp":1690661666808,"user_tz":180,"elapsed":12,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"8a150b49-033d-48e1-c516-7cf24b411b98"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["110"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["test_df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"utELtM7LcHn0","executionInfo":{"status":"ok","timestamp":1690661666809,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"07c94437-024c-4a7b-bfad-c4725cc360ab"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['case_id', 'prefix', 'k', 'time_passed', 'recent_time', 'latest_time',\n","       'remaining_time_days'],\n","      dtype='object')"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"Xwz8E6glGHZ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690661696305,"user_tz":180,"elapsed":29504,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"af909077-1d3f-47c9-933c-c8f278718daa"},"source":["# Evaluate over all the prefixes (k) and save the results\n","k, maes, mses, rmses = [],[],[],[]\n","\n","for i in range(max_case_length):\n","    test_data_subset = test_df[test_df[\"k\"] == i]\n","    if len(test_data_subset) > 0:\n","        test_token_x, test_time_x, test_y, _, _ = data_loader.prepare_data_remaining_time(\n","            test_data_subset, x_word_dict, max_case_length, time_scaler, y_scaler, False) #shuffle\n","\n","        if(author == 'Silva'):\n","            test_token_x_3d = test_token_x.reshape(test_token_x.shape[0], test_token_x.shape[1], 1)\n","            test_time_x_3d = test_time_x.reshape(test_time_x.shape[0], test_time_x.shape[1], 1)\n","\n","            y_pred = transformer_model.predict([test_token_x_3d, test_time_x_3d])\n","        else:\n","            y_pred = transformer_model.predict([test_token_x, test_time_x])\n","\n","        _test_y = y_scaler.inverse_transform(test_y)\n","        _y_pred = y_scaler.inverse_transform(y_pred)\n","\n","        k.append(i)\n","        maes.append(metrics.mean_absolute_error(_test_y, _y_pred))\n","        mses.append(metrics.mean_squared_error(_test_y, _y_pred))\n","        rmses.append(np.sqrt(metrics.mean_squared_error(_test_y, _y_pred)))\n","    else:\n","      print('size', i, 'not found')\n","\n","k.append(i + 1)\n","maes.append(np.mean(maes))\n","mses.append(np.mean(mses))\n","rmses.append(np.mean(rmses))"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["187/187 [==============================] - 1s 4ms/step\n","187/187 [==============================] - 1s 4ms/step\n","186/186 [==============================] - 1s 4ms/step\n","142/142 [==============================] - 1s 4ms/step\n","139/139 [==============================] - 1s 4ms/step\n","139/139 [==============================] - 1s 4ms/step\n","116/116 [==============================] - 0s 4ms/step\n","112/112 [==============================] - 0s 4ms/step\n","106/106 [==============================] - 0s 4ms/step\n","103/103 [==============================] - 0s 4ms/step\n","97/97 [==============================] - 1s 6ms/step\n","95/95 [==============================] - 1s 5ms/step\n","89/89 [==============================] - 1s 5ms/step\n","87/87 [==============================] - 0s 4ms/step\n","83/83 [==============================] - 0s 4ms/step\n","82/82 [==============================] - 0s 4ms/step\n","77/77 [==============================] - 0s 4ms/step\n","76/76 [==============================] - 0s 4ms/step\n","71/71 [==============================] - 0s 4ms/step\n","69/69 [==============================] - 0s 4ms/step\n","65/65 [==============================] - 0s 4ms/step\n","63/63 [==============================] - 0s 4ms/step\n","59/59 [==============================] - 0s 4ms/step\n","57/57 [==============================] - 0s 4ms/step\n","53/53 [==============================] - 0s 4ms/step\n","50/50 [==============================] - 0s 4ms/step\n","47/47 [==============================] - 0s 4ms/step\n","44/44 [==============================] - 0s 4ms/step\n","41/41 [==============================] - 0s 4ms/step\n","38/38 [==============================] - 0s 4ms/step\n","36/36 [==============================] - 0s 4ms/step\n","33/33 [==============================] - 0s 4ms/step\n","30/30 [==============================] - 0s 4ms/step\n","28/28 [==============================] - 0s 4ms/step\n","26/26 [==============================] - 0s 4ms/step\n","24/24 [==============================] - 0s 4ms/step\n","22/22 [==============================] - 0s 4ms/step\n","21/21 [==============================] - 0s 4ms/step\n","19/19 [==============================] - 0s 5ms/step\n","18/18 [==============================] - 0s 4ms/step\n","16/16 [==============================] - 0s 5ms/step\n","15/15 [==============================] - 0s 7ms/step\n","14/14 [==============================] - 0s 6ms/step\n","13/13 [==============================] - 0s 6ms/step\n","12/12 [==============================] - 0s 6ms/step\n","11/11 [==============================] - 0s 6ms/step\n","10/10 [==============================] - 0s 6ms/step\n","10/10 [==============================] - 0s 8ms/step\n","9/9 [==============================] - 0s 9ms/step\n","9/9 [==============================] - 0s 7ms/step\n","8/8 [==============================] - 0s 8ms/step\n","8/8 [==============================] - 0s 5ms/step\n","7/7 [==============================] - 0s 6ms/step\n","7/7 [==============================] - 0s 6ms/step\n","7/7 [==============================] - 0s 6ms/step\n","6/6 [==============================] - 0s 6ms/step\n","6/6 [==============================] - 0s 6ms/step\n","6/6 [==============================] - 0s 6ms/step\n","5/5 [==============================] - 0s 6ms/step\n","5/5 [==============================] - 0s 7ms/step\n","5/5 [==============================] - 0s 6ms/step\n","4/4 [==============================] - 0s 7ms/step\n","4/4 [==============================] - 0s 6ms/step\n","4/4 [==============================] - 0s 9ms/step\n","4/4 [==============================] - 0s 5ms/step\n","4/4 [==============================] - 0s 5ms/step\n","3/3 [==============================] - 0s 6ms/step\n","3/3 [==============================] - 0s 5ms/step\n","3/3 [==============================] - 0s 7ms/step\n","3/3 [==============================] - 0s 5ms/step\n","3/3 [==============================] - 0s 5ms/step\n","3/3 [==============================] - 0s 6ms/step\n","3/3 [==============================] - 0s 5ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 8ms/step\n","2/2 [==============================] - 0s 8ms/step\n","2/2 [==============================] - 0s 8ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 7ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 37ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 41ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 41ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - 0s 39ms/step\n","1/1 [==============================] - 0s 37ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 35ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 33ms/step\n","1/1 [==============================] - 0s 36ms/step\n","1/1 [==============================] - 0s 43ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 37ms/step\n","1/1 [==============================] - 0s 35ms/step\n","size 111 not found\n","size 112 not found\n","size 113 not found\n","size 114 not found\n","size 115 not found\n","size 116 not found\n","size 117 not found\n"]}]},{"cell_type":"code","source":["for i in range(len(maes)):\n","  print(str(round(maes[i], 4)).replace('.',','))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mMrBFpf-VBAt","executionInfo":{"status":"ok","timestamp":1690661696306,"user_tz":180,"elapsed":11,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"dbe035b1-a32d-4aea-8631-1e3451c2a4b1"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["6,0301\n","5,8595\n","4,7547\n","5,8185\n","5,4239\n","5,1216\n","5,8988\n","5,7783\n","5,7071\n","5,629\n","5,6542\n","5,6075\n","5,6275\n","5,5794\n","5,5289\n","5,3863\n","5,2768\n","5,0431\n","4,9125\n","4,6935\n","4,6154\n","4,4833\n","4,4438\n","4,3083\n","4,1469\n","4,0096\n","3,8559\n","3,7491\n","3,674\n","3,582\n","3,5612\n","3,5612\n","3,4955\n","3,3942\n","3,4035\n","3,2364\n","3,2557\n","3,1185\n","3,1312\n","3,0324\n","2,982\n","2,9792\n","2,9472\n","2,97\n","2,9282\n","2,816\n","2,8309\n","2,8885\n","2,9258\n","2,8366\n","2,7924\n","2,6888\n","2,6678\n","2,5908\n","2,7108\n","2,524\n","2,4885\n","2,5942\n","2,5271\n","2,4499\n","2,4101\n","2,3616\n","2,3427\n","2,2515\n","2,262\n","2,2192\n","2,2165\n","2,2719\n","2,0636\n","2,1192\n","2,0781\n","2,0785\n","2,058\n","1,9635\n","1,9105\n","1,8356\n","1,7719\n","1,8088\n","2,0681\n","1,9746\n","1,9912\n","2,0179\n","2,0747\n","1,8819\n","1,8491\n","1,8154\n","1,9138\n","1,8168\n","1,8499\n","1,5818\n","1,6513\n","1,8317\n","1,6129\n","1,7107\n","1,6507\n","1,5345\n","1,6194\n","2,2657\n","2,3081\n","2,4669\n","2,4489\n","2,6714\n","2,7052\n","2,5382\n","2,196\n","2,4514\n","2,5189\n","2,098\n","2,6004\n","4,0598\n","4,0246\n","3,1383\n"]}]},{"cell_type":"code","source":["for i in range(len(maes)):\n","  print(k[i], maes[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WSGMq6uFiFrh","executionInfo":{"status":"ok","timestamp":1690661696306,"user_tz":180,"elapsed":10,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"40f1330b-41f1-4723-f8d0-f1582dab4be5"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["0 6.0300775\n","1 5.8595138\n","2 4.7547007\n","3 5.8184686\n","4 5.4238887\n","5 5.121581\n","6 5.898849\n","7 5.7783175\n","8 5.707095\n","9 5.62896\n","10 5.6541862\n","11 5.607505\n","12 5.6275043\n","13 5.5794153\n","14 5.5289083\n","15 5.3862753\n","16 5.276798\n","17 5.043087\n","18 4.912522\n","19 4.693544\n","20 4.6153526\n","21 4.4832997\n","22 4.443768\n","23 4.3082724\n","24 4.1468925\n","25 4.009616\n","26 3.8558743\n","27 3.7491138\n","28 3.6740317\n","29 3.5819967\n","30 3.5611618\n","31 3.561243\n","32 3.4955194\n","33 3.3941753\n","34 3.4035318\n","35 3.2363923\n","36 3.25569\n","37 3.1184893\n","38 3.1312206\n","39 3.0324047\n","40 2.9820385\n","41 2.979182\n","42 2.9472249\n","43 2.969973\n","44 2.92825\n","45 2.8159924\n","46 2.8309271\n","47 2.888474\n","48 2.9258068\n","49 2.83662\n","50 2.7923684\n","51 2.6887891\n","52 2.6677742\n","53 2.5907555\n","54 2.7108073\n","55 2.5240426\n","56 2.4885201\n","57 2.5941803\n","58 2.5271122\n","59 2.4499257\n","60 2.410093\n","61 2.3616147\n","62 2.3427486\n","63 2.2514572\n","64 2.261956\n","65 2.2192497\n","66 2.2165413\n","67 2.2719247\n","68 2.0635836\n","69 2.1192422\n","70 2.0780656\n","71 2.078475\n","72 2.058041\n","73 1.9635103\n","74 1.9105266\n","75 1.8356262\n","76 1.7719024\n","77 1.8088404\n","78 2.0681329\n","79 1.9746438\n","80 1.991169\n","81 2.0178797\n","82 2.074656\n","83 1.8819108\n","84 1.8491398\n","85 1.8153889\n","86 1.9138099\n","87 1.816786\n","88 1.8499246\n","89 1.5817622\n","90 1.6512536\n","91 1.8317146\n","92 1.6129265\n","93 1.7107457\n","94 1.6507044\n","95 1.5345026\n","96 1.6193907\n","97 2.2656617\n","98 2.3081274\n","99 2.4669065\n","100 2.4488955\n","101 2.671361\n","102 2.705205\n","103 2.5381713\n","104 2.1960144\n","105 2.451417\n","106 2.5189338\n","107 2.0980043\n","108 2.6004128\n","109 4.0598\n","110 4.024567\n","118 3.1383\n"]}]},{"cell_type":"code","metadata":{"id":"8sRN64RZGHZ4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690661696307,"user_tz":180,"elapsed":8,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"49990edf-984e-4b88-86a6-14561e26cd22"},"source":["print('Average MAE across all prefixes:', np.mean(maes))\n","print('Average MSE across all prefixes:', np.mean(mses))\n","print('Average RMSE across all prefixes:', np.mean(rmses))"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Average MAE across all prefixes: 3.1383002\n","Average MSE across all prefixes: 22.597376\n","Average RMSE across all prefixes: 4.313522\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"mdS1UDPDjV4F","executionInfo":{"status":"ok","timestamp":1690661696307,"user_tz":180,"elapsed":5,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":["Teste sem prefixos"],"metadata":{"id":"0Lcrlh3Oh2jq"}},{"cell_type":"code","source":["test_token_x, test_time_x, test_y, _, _ = data_loader.prepare_data_remaining_time(\n","        test_df, x_word_dict, max_case_length, time_scaler, y_scaler, False) #shuffle\n","\n","y_pred = transformer_model.predict([test_token_x, test_time_x])\n","_test_y = y_scaler.inverse_transform(test_y)\n","_y_pred = y_scaler.inverse_transform(y_pred)\n","\n","metrics.mean_absolute_error(_test_y, _y_pred)"],"metadata":{"id":"i9MFm5qBTnJS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690661718015,"user_tz":180,"elapsed":21713,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"52d2c9da-3a35-49d5-e431-efd3ef81482e"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["3235/3235 [==============================] - 14s 4ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["4.9135823"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["import numpy as np\n","import scipy.stats as st\n","\n","def ci(data):\n","  #create 95% confidence interval for population mean weight\n","  return st.t.interval(alpha=0.95, df=len(data)-1, loc=np.mean(data), scale=st.sem(data))"],"metadata":{"id":"X99ADi5Vii87","executionInfo":{"status":"ok","timestamp":1690661718016,"user_tz":180,"elapsed":20,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["int_conf = ci(abs(np.squeeze(_test_y) - np.squeeze(_y_pred)))"],"metadata":{"id":"3Ir397XpMe-H","executionInfo":{"status":"ok","timestamp":1690661718016,"user_tz":180,"elapsed":19,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["int_conf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FLeVH3vKMf3l","executionInfo":{"status":"ok","timestamp":1690661718016,"user_tz":180,"elapsed":19,"user":{"displayName":"Ronildo Silva","userId":"12710935293836534770"}},"outputId":"872e5ef8-fd1b-46e3-a87b-1de1e377658e"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4.881951378187117, 4.945213271776262)"]},"metadata":{},"execution_count":46}]}]}